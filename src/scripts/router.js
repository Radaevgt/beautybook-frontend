/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è SPA
 * 
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û:
 * - –£–±—Ä–∞–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—è –ø—Ä–∏ "Route not found"
 * - –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ navigate
 * - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ GitHub Pages –ø—Ä–µ—Ñ–∏–∫—Å–∞
 */
class Router {
    constructor() {
        this.routes = {};
        this.currentRoute = null;
        this.isNavigating = false; // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
    }
    
    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç
     */
    on(path, handler) {
        this.routes[path] = handler;
    }
    
    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä–æ—É—Ç—É
     */
    navigate(path) {
        // ‚úÖ –ó–ê–©–ò–¢–ê –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
        if (this.isNavigating) {
            console.warn('Navigation already in progress, skipping:', path);
            return;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        path = this.normalizePath(path);
        
        // –ï—Å–ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ–º —Ä–æ—É—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (path === this.currentRoute) {
            console.log('Already on route:', path);
            return;
        }
        
        this.isNavigating = true;
        
        try {
            console.log('üîÑ Navigating to:', path);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ history
            window.history.pushState({}, '', path);
            this.currentRoute = path;
            
            // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            const route = this.matchRoute(path);
            
            if (route) {
                console.log('‚úÖ Route found, calling handler');
                route.handler(route.params);
            } else {
                // ‚úÖ –ù–ï –í–´–ó–´–í–ê–ï–ú navigate('/') - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ —Ä–µ–∫—É—Ä—Å–∏—é!
                console.warn('‚ö†Ô∏è Route not found:', path, 'Available routes:', Object.keys(this.routes));
                
                // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ø—Ä—è–º—É—é
                if (this.routes['/']) {
                    console.log('Showing home page as fallback');
                    this.routes['/']({});
                } else {
                    console.error('‚ùå No home route registered!');
                }
            }
        } finally {
            // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            this.isNavigating = false;
        }
    }
    
    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
     */
    normalizePath(path) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å GitHub Pages
        path = path.replace('/beautybook-frontend', '');
        
        // –£–±–∏—Ä–∞–µ–º query string –∏ hash
        path = path.split('?')[0].split('#')[0];
        
        // –£–±–∏—Ä–∞–µ–º trailing slash (–∫—Ä–æ–º–µ –∫–æ—Ä–Ω—è)
        if (path !== '/' && path.endsWith('/')) {
            path = path.slice(0, -1);
        }
        
        // –ï—Å–ª–∏ –ø—É—Ç—å –ø—É—Å—Ç–æ–π, —Å—Ç–∞–≤–∏–º /
        if (!path || path === '') {
            path = '/';
        }
        
        return path;
    }
    
    /**
     * –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Ä–æ—É—Ç
     */
    matchRoute(path) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (this.routes[path]) {
            return {
                handler: this.routes[path],
                params: {}
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã
        for (const routePath in this.routes) {
            const params = this.matchParams(routePath, path);
            if (params) {
                return {
                    handler: this.routes[routePath],
                    params: params
                };
            }
        }
        
        return null;
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø—É—Ç–∏
     */
    matchParams(routePath, actualPath) {
        const routeParts = routePath.split('/').filter(p => p);
        const actualParts = actualPath.split('/').filter(p => p);
        
        if (routeParts.length !== actualParts.length) {
            return null;
        }
        
        const params = {};
        
        for (let i = 0; i < routeParts.length; i++) {
            if (routeParts[i].startsWith(':')) {
                // –≠—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä
                const paramName = routeParts[i].substring(1);
                params[paramName] = actualParts[i];
            } else if (routeParts[i] !== actualParts[i]) {
                // –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                return null;
            }
        }
        
        return params;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
     */
    init() {
        console.log('üöÄ Router initialization');
        console.log('Registered routes:', Object.keys(this.routes));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        window.addEventListener('popstate', () => {
            const path = this.normalizePath(window.location.pathname);
            console.log('Popstate event, navigating to:', path);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏
            this.isNavigating = false;
            this.currentRoute = null;
            
            this.navigate(path);
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
        let currentPath = this.normalizePath(window.location.pathname);
        
        console.log('Initial path:', currentPath);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º currentRoute —á—Ç–æ–±—ã –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        this.currentRoute = null;
        
        // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏
        this.navigate(currentPath);
    }
}

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
const router = new Router();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
export { router };

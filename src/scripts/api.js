/**
 * API Module –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Backend
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–û:
 * - Endpoint –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: DELETE /bookings/{id}
 */

export class API {
    constructor() {
        // URL –≤–∞—à–µ–≥–æ backend API (—á–µ—Ä–µ–∑ ngrok)
        this.baseURL = window.API_URL || 'http://localhost:8000/api';
        
        console.log('üîó API Base URL:', this.baseURL);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    getHeaders() {
        const headers = {
            'Content-Type': 'application/json',
            'ngrok-skip-browser-warning': 'true'  // ‚Üê –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ngrok
        };

        // –î–æ–±–∞–≤–ª—è–µ–º Telegram initData –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (window.Telegram?.WebApp?.initData) {
            headers['Authorization'] = `tma ${window.Telegram.WebApp.initData}`;
        }

        return headers;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ API
     */
    async handleResponse(response) {
        if (!response.ok) {
            const error = await response.json().catch(() => ({
                detail: `HTTP ${response.status}: ${response.statusText}`
            }));
            throw new Error(error.detail || error.message || '–û—à–∏–±–∫–∞ API');
        }
        return response.json();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–ª–æ–Ω–µ
     */
    async getSalon() {
        try {
            const response = await fetch(`${this.baseURL}/salon`, {
                method: 'GET',
                headers: this.getHeaders()
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ getSalon:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
     */
    async getMasters() {
        try {
            const response = await fetch(`${this.baseURL}/masters`, {
                method: 'GET',
                headers: this.getHeaders()
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ getMasters:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID
     */
    async getMaster(masterId) {
        try {
            const response = await fetch(`${this.baseURL}/masters/${masterId}`, {
                method: 'GET',
                headers: this.getHeaders()
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ getMaster:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
     */
    async getMasterServices(masterId) {
        try {
            const response = await fetch(`${this.baseURL}/masters/${masterId}/services`, {
                method: 'GET',
                headers: this.getHeaders()
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ getMasterServices:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –ø–æ ID
     */
    async getService(serviceId) {
        try {
            const response = await fetch(`${this.baseURL}/services/${serviceId}`, {
                method: 'GET',
                headers: this.getHeaders()
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ getService:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
     */
    async getAvailableSlots(masterId, date) {
        try {
            const response = await fetch(
                `${this.baseURL}/schedule/${masterId}?date=${date}`,
                {
                    method: 'GET',
                    headers: this.getHeaders()
                }
            );
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ getAvailableSlots:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    async createBooking(bookingData) {
        try {
            const response = await fetch(`${this.baseURL}/bookings`, {
                method: 'POST',
                headers: this.getHeaders(),
                body: JSON.stringify(bookingData)
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ createBooking:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏
     */
    async getMyBookings() {
        try {
            const response = await fetch(`${this.baseURL}/bookings/my`, {
                method: 'GET',
                headers: this.getHeaders()
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ getMyBookings:', error);
            throw error;
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
     * 
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: DELETE /bookings/{id} –≤–º–µ—Å—Ç–æ POST /bookings/{id}/cancel
     */
    async cancelBooking(bookingId) {
        try {
            const response = await fetch(`${this.baseURL}/bookings/${bookingId}`, {
                method: 'DELETE',
                headers: this.getHeaders()
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ cancelBooking:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤
     */
    async createReview(reviewData) {
        try {
            const response = await fetch(`${this.baseURL}/reviews`, {
                method: 'POST',
                headers: this.getHeaders(),
                body: JSON.stringify(reviewData)
            });
            return this.handleResponse(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ createReview:', error);
            throw error;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const api = new API();
